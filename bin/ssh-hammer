#!/usr/bin/env ruby 

require "uri"
require "highline/import"
require "em-ssh"
require "em-ssh/shell"
require "pry-remote-em/server"
require "ssh-hammer/stats"

class Passwords
  class << self
    def get(*path)
      path     = path.flatten
      file_key = path.join(".")
      return password if (password = ENV[path.join"_"])
      [File.expand_path("~/.passwords"), "/etc/passwords"].each do |dir|
        pfile = File.join(dir, file_key)
        next unless File.exists?(pfile)
        password = IO.read(pfile).chomp
        return password.chomp if password
      end #  |dir|
      
      if STDIN.tty?
        password = ask("What is #{path} password? "){|q| q.echo = "*" }
      end 
      return password
    end 
  end # << self
end # class::Passwords




class SshHammer
  include EM::Deferrable
  def initialize(uri, wait_str, opts = {})
    opts      = {:pause => 0.5, :timeout => 10, :min_retries => 5}.merge(opts)
    opts.each{|k,v| self.instance_variable_set("@#{k}".intern, v)}
    @uri      = uri
    @wait_str = wait_str
    @session_cnt   = 0
    @tries         = @min_retries
    @retry_pause ||= @pause * 5
    Fiber.new { yield self }.resume if block_given?
  end 


  def sleep(t = @pause)
    f = Fiber.current
    EM::Timer.new(t) { f.resume }
    Fiber.yield
  end

  def hammer
    @start = Time.new
    start_hammers
    EM::PeriodicTimer.new(2) do
      threshold      = @concurrency - (@concurrency - 0.20).to_i
      threshold      = 10 if threshold < 10
      objs_to_report = ObjectSpace.each_object.to_a
                        .each_with_object(Hash.new{|h,k| h[k] = 0}) { |o,h| h[o.class] += 1 }
                        .select{|k,v| v > threshold }
      objs_to_report.each do |name, cnt|
        next if name == RubyVM::InstructionSequence
        Stats.gauge("ssh-hammer.#{@uri.host}.#{name}".gsub('::', '.'), cnt)
      end 
      EM.defer(proc { 
        `ps ax -o pid,rss | grep -E "^[[:space:]]*#{Process::pid}"`.chomp.split(/\s+/).map {|s| s.strip.to_i}[1]
      }, proc { |m| Stats.gauge("ssh-hammer.#{@uri.host}.memory.used", m) })
      print "#{stat}"
    end
  end 

  def stat
    "\r#{' ' * 120}\r#{@session_cnt} sessions (#{@hammers}/#{@concurrency}) @#{@start && elapsed(@start)} minutes "
  end # stat

  def elapsed(since)
    ((Time.new - since) / 60).round(2)
  end 

  def start_hammers
    concurrency   = max_concurrency
    @concurrency  = concurrency
    @session_cnt += concurrency
    @hammers      = concurrency
    print "\r#{stat} switch concurrency is #{concurrency} "
    
    if concurrency > 0 && @tries != @min_tries
      @tries       = @min_retries 
      @retry_pause = @pause * 5
    end

    Stats.gauge("#{@uri.host}.concurrency", concurrency)

    concurrency.times do |i|
      Fiber.new { 
        verify(i)
        @hammers -= 1
        if @hammers <= 0
          EM::Timer.new(@pause) { Fiber.new { start_hammers }.resume } 
        end 
      }.resume
      sleep(@pause)
    end

    if concurrency == 0
      @tries -= 1
      if @tries > 0
        open? do |is_open|
          if is_open
            @retry_pause = @retry_pause * 2
            puts "concurrency is at 0, but port 22 appears to be open; retrying #{@tries} times in #{@retry_pause}s"
            EM::Timer.new(@retry_pause) { Fiber.new { start_hammers }.resume }
          else
            succeed(@session_cnt)
          end 
        end
      else
        puts "concurrency is at 0, but port 22 appears to be open; no more retries left"
        succeed(@session_cnt)
      end 
    end
  end


  def verify(id)
    f = Fiber.current
    shell = EM::Ssh::Shell.new(@uri.host, @uri.user, @uri.password, :timeout => @timeout, :reconnect => false, :net_ssh => {:nego_timeout => 2}) 
    shell.errback do |e| 
      print "*"
      EM.next_tick do
        shell = nil
        f.resume(false) 
      end
    end
    shell.callback do
      e = false
      begin
        shell.expect(@wait_str)
        @session_cnt += 1
        Stats.incr("#{@uri.host}.sessions")
        Stats.gauge("#{@uri.host}.sessions.total", @session_cnt)
        # this causes a memory leak
        #shell.expect(@wait_str, "show version\n")
        shell.send_data("exit\n")
        print "."
        shell.disconnect(2)
      rescue => e
        print "*"
      end
      EM.next_tick do 
        shell = nil
        f.resume(!!!e)
      end
    end
    Fiber.yield
  end # verify(id)

  def open?(timeout = 5, &blk)
    return unless block_given?
    work = proc do
      sock = nil
      begin
        Timeout.timeout(timeout || 5) { sock  = TCPSocket::new(@uri.host, 22) } 
      rescue Timeout::Error, Errno::ECONNREFUSED, Errno::EHOSTDOWN
        false
      ensure
        sock.close if sock
      end 
      true
    end
    EM.defer(work, proc {|r| yield(r) })
  end

  def max_connections
    EM::PeriodicTimer.new(3) { print "#{stat}" }
    f      = Fiber.current
    cnt    = 0
    shells = []
    timer  = EM::PeriodicTimer.new(1) do
      EM::Ssh::Shell.new(@uri.host, @uri.user, @uri.password, :timeout => @timeout, :net_ssh => {:nego_timeout => 2}) do |shell|
        shell.errback { |e| print "*" }
        shell.callback do
          shells << shell
          begin
            shell.expect(@wait_str)
            cnt += 1
            # this causes a memory leak
            #shell.expect(@wait_str, "show version\n")
            print "."
          rescue => e
            print "*"
          end
        end
      end
    end

    EM::PeriodicTimer.new(5) do
      open? do |is_open|
        unless is_open
          timer && timer.cancel
          shells.each do |s|
            s.close
            s.connection.close_connection
          end
          f.resume(cnt)
        end
      end
    end

    Fiber.yield
  end

  def max_concurrency
    MaxConcurrency.new(@uri, @timeout, @wait_str, &method(:stat)).count
  end 

  class MaxConcurrency
    def initialize(uri, timeout, wait_str, &blk)
      @uri      = uri
      @timeout  = timeout
      @wait_str = wait_str
      @shells   = []
      @cnt      = 0
      @stat     = blk
      count
    end 

    def count
      return @count if @count
      @f = Fiber.current
      @timer = EM::PeriodicTimer.new(1) do
        new_connection
      end
      Fiber.yield
    end 

    def new_connection
      shell = EM::Ssh::Shell.new(@uri.host, @uri.user, @uri.password, :timeout => @timeout, :net_ssh => {:nego_timeout => 2}) 
      @shells << shell
      shell.callback do
        print "-"
        begin
          shell.expect(@wait_str)
          @cnt += 1
          print "+"
        rescue => e
          @timer && @timer.cancel
          EM::Timer.new(2) { Fiber.new { stop }.resume }
        end
      end
      shell.errback do |e| 
        @timer && @timer.cancel
        EM::Timer.new(2) { Fiber.new { stop }.resume } 
      end
    end 

    def stop
      return @count if @count
      @count = @cnt
      @timer && @timer.cancel
      print "#{@stat.call} max concurrent connections is #{@count} "
      @shells.clone.each do |s|
        Fiber.new {
          s.send_data("exit\n")
          s.disconnect(2)
          @shells.delete(s)
        }.resume
      end
      t = EM::PeriodicTimer.new(1) do
        if @shells.empty? 
          t.cancel
          if @f
            @f,f = nil, @f
            f.resume(@count)
          end
        end 
      end
    end 
  end

end

wait_str= "BS2(TEST)SMIS# "
options  = {}
opts = OptionParser.new
opts.on('-p', '--prompt String', String, "prompt to expect after login default: #{wait_str.inspect}") { |w| wait_str = w }
opts.on('-t', '--timeout Integer', Integer, 'number of seconds to wait for the device to open an ssh connection ') {|t| options[:timeout] = t}
opts.on('--pause Decimal', Float, 'number of seconds to wait before establishing a new connection') {|t| options[:pause] = t }
opts.on('--retry-pause Decimal', Float, 'number of seconds to wait before restarting the test after the device appears to have crashed') {|t| options[:retry_pause] = t }
opts.on('-r', '--retries Integer', Integer, 'number of times each thread should retry the connection before giving up') {|r| options[:min_retries] = r }
opts.on('-f', '--find-concurrency', 'determine the current maximum number of concurrent session supported') {  options[:find_concurrency] = true }
opts.on('--open-connections', 'determine number of open connections the device supports') { options[:open_connections] = true }
opts.banner = opts.banner + " URL"
opts.parse!(ARGV)

wait_str = Regexp.escape(wait_str)

addr_idx = ARGV.index{|i| i.start_with?("ssh://")}
if addr_idx.nil?
  puts "\e[31m ssh:// url expected\e[0m"
  Process.exit  
end 

uri          = URI.parse(ARGV[addr_idx])
uri.user     = "admin" if uri.user.nil?
uri.password = Passwords.get(["switch", uri.host]) if uri.password.nil?
uri.port     = 22 if uri.port.nil?



EM.run do
  #EM::Ssh.logger(::Logger::DEBUG)
  SshHammer.new(uri, wait_str, options) do |crasher|
    crasher.remote_pry_em('127.0.0.1', :auto)
    if options[:find_concurrency]
      puts "\nmax concurrency: #{crasher.max_concurrency}\n\n"
      EM.stop
    elsif options[:open_connections]
      puts "\nmax open connections #{crasher.max_connections}\n\n"
      EM.stop
    else  
      start = Time.new
      crasher.callback do |sessions|
        puts "total sessions #{sessions}"
        puts "total time: #{((Time.new - start) / 60).round(2)} minutes"
        EM.stop
      end
      crasher.hammer
    end 
  end
end
